AWSTemplateFormatVersion: "2010-09-09"

Transform: 'AWS::Serverless-2016-10-31'

Description: "Site Alerter infrastructure"

Parameters:
  NotificationEmailFrom:
    Description: The sender address for notification emails.
    Type: String
  NotificationEmailTo:
    Description: The email address where notifications must be sent.
    Type: String
  Env:
    Description: The environment of this stack.
    Type: String
  CognitoCallbackUrl:
    Description: The callback URL to be used for Cognito auth flows
    Type: String

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public0:
      CIDR: "10.0.0.0/24"
    Public1:
      CIDR: "10.0.1.0/24"
    Private0:
      CIDR: "10.0.2.0/24"
    Private1:
      CIDR: "10.0.3.0/24"

  # This mapping accounts for the scenario when certain AZs
  # are not available to use (this differs on a per account
  # per customer basis). E.g., if the 'b' AZ is not available
  # in a specific region in one's account then updating the
  # list contained in the mapping below here will allow a
  # different AZ to be chosen.
  AZRegions:
    ap-northeast-1:
      AZs: ["a", "b"]
    ap-northeast-2:
      AZs: ["a", "b"]
    ap-south-1:
      AZs: ["a", "b"]
    ap-southeast-1:
      AZs: ["a", "b"]
    ap-southeast-2:
      AZs: ["a", "b"]
    ca-central-1:
      AZs: ["a", "b"]
    eu-central-1:
      AZs: ["a", "b"]
    eu-west-1:
      AZs: ["a", "b"]
    eu-west-2:
      AZs: ["a", "b"]
    sa-east-1:
      AZs: ["a", "b"]
    us-east-1:
      AZs: ["a", "b"]
    us-east-2:
      AZs: ["a", "b"]
    us-west-1:
      AZs: ["a", "b"]
    us-west-2:
      AZs: ["a", "b"]


Globals:
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowMethods: "'POST, GET, OPTIONS, DELETE, PUT'"
      AllowHeaders: "'Content-Type'"
    Auth:
      DefaultAuthorizer: Cognito
      Authorizers:
        Cognito:
          UserPoolArn: !GetAtt UserPool.Arn

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"

  PublicSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public0"
          - "CIDR"
      MapPublicIpOnLaunch: "true"

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public1"
          - "CIDR"
      MapPublicIpOnLaunch: "true"

  PrivateSubnet0:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private0"
          - "CIDR"

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private1"
          - "CIDR"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"

  PublicSubnetRouteTableAssociation0:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet0"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      RouteTableId:
        Ref: "PublicRouteTable"

  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"

  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnetNetworkAclAssociation0:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet0"
      NetworkAclId:
        Ref: "PublicNetworkAcl"

  PublicSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      NetworkAclId:
        Ref: "PublicNetworkAcl"

  # ElasticIP0:
  #   Type: "AWS::EC2::EIP"
  #   Properties:
  #     Domain: "vpc"

  # ElasticIP1:
  #   Type: "AWS::EC2::EIP"
  #   Properties:
  #     Domain: "vpc"

  # NATGateway0:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId:
  #       Fn::GetAtt:
  #         - "ElasticIP0"
  #         - "AllocationId"
  #     SubnetId:
  #       Ref: "PublicSubnet0"

  # NATGateway1:
  #   Type: "AWS::EC2::NatGateway"
  #   Properties:
  #     AllocationId:
  #       Fn::GetAtt:
  #         - "ElasticIP1"
  #         - "AllocationId"
  #     SubnetId:
  #       Ref: "PublicSubnet1"

  # PrivateRouteTable0:
  #   Type: "AWS::EC2::RouteTable"
  #   Properties:
  #     VpcId:
  #       Ref: "VPC"

  # PrivateRouteTable1:
  #   Type: "AWS::EC2::RouteTable"
  #   Properties:
  #     VpcId:
  #       Ref: "VPC"

  # PrivateRouteToInternet0:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     RouteTableId:
  #       Ref: "PrivateRouteTable0"
  #     DestinationCidrBlock: "0.0.0.0/0"
  #     NatGatewayId:
  #       Ref: "NATGateway0"

  # PrivateRouteToInternet1:
  #   Type: "AWS::EC2::Route"
  #   Properties:
  #     RouteTableId:
  #       Ref: "PrivateRouteTable1"
  #     DestinationCidrBlock: "0.0.0.0/0"
  #     NatGatewayId:
  #       Ref: "NATGateway1"

  # PrivateSubnetRouteTableAssociation0:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties:
  #     SubnetId:
  #       Ref: "PrivateSubnet0"
  #     RouteTableId:
  #       Ref: "PrivateRouteTable0"

  # PrivateSubnetRouteTableAssociation1:
  #   Type: "AWS::EC2::SubnetRouteTableAssociation"
  #   Properties:
  #     SubnetId:
  #       Ref: "PrivateSubnet1"
  #     RouteTableId:
  #       Ref: "PrivateRouteTable1"

  UserPool:
    Type: AWS::Cognito::UserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - implicit
      CallbackURLs:
        - !Ref CognitoCallbackUrl
      LogoutURLs:
        - !Join ['', [!Ref CognitoCallbackUrl, 'logout']]
      ClientName: WebClient
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref UserPool

  UrlsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Join ['_', [!Ref 'AWS::StackName', !Ref Env, 'Urls']]
      BillingMode: 'PAY_PER_REQUEST'
      AttributeDefinitions:
        - AttributeName: 'pk'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'pk'
          KeyType: 'HASH'

  NotificationEmailTemplate:
    Type: 'AWS::SES::Template'
    Properties:
      Template:
        TemplateName: !Join ['_', [!Ref 'AWS::StackName', !Ref Env, 'NotificationEmailTemplate']]
        SubjectPart: 'Change notification'
        TextPart: |
          Hello,

          You are receiving this email notification because you are tracking changes to a
          website, and our most recent check detected that some modifications were made.

          The affected URL is the following:

          {{url}}

          Best,
          The SiteAlerter Team.

  CrawlerJobQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      VisibilityTimeout: 60

  SharedLibraryLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Join ['_', ['SiteAlerterSharedLayer', !Ref Env]]
      ContentUri: src/common
      CompatibleRuntimes:
        - python3.7

  EnqueueCrawlerJobsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/crawler/
      Handler: crawler.scheduled_event_handler
      Runtime: python3.7
      Layers:
        - !Ref SharedLibraryLayer
      Events:
        DailyScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 0 * * ? *)
      Policies:
        - 'AWSLambdaExecute'
        - DynamoDBCrudPolicy:
            TableName: !Ref UrlsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt CrawlerJobQueue.QueueName
      Environment:
        Variables:
          URL_TABLE_NAME: !Ref UrlsTable
          CRAWLER_QUEUE_URL: !Ref CrawlerJobQueue
          DYNAMODB_ENDPOINT: !Sub https://dynamodb.${AWS::Region}.amazonaws.com
          SQS_ENDPOINT: !Sub https://sqs.${AWS::Region}.amazonaws.com

  CrawlUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/crawler/
      Handler: crawler.crawler_handler
      Runtime: python3.7
      Layers:
        - !Ref SharedLibraryLayer
      Events:
        DailyScheduledEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CrawlerJobQueue.Arn
            BatchSize: 10
      Policies:
        - 'AWSLambdaExecute'
        - DynamoDBCrudPolicy:
            TableName: !Ref UrlsTable
        - SQSPollerPolicy:
            QueueName: !GetAtt CrawlerJobQueue.QueueName
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "ses:SendTemplatedEmail"
              Resource: "*"
      Environment:
        Variables:
          URL_TABLE_NAME: !Ref UrlsTable
          SES_TEMPLATE_NAME: !Ref NotificationEmailTemplate
          NOTIFICATION_EMAIL_FROM: !Ref NotificationEmailFrom
          NOTIFICATION_EMAIL_TO: !Ref NotificationEmailTo
          DYNAMODB_ENDPOINT: !Sub https://dynamodb.${AWS::Region}.amazonaws.com
          SQS_ENDPOINT: !Sub https://sqs.${AWS::Region}.amazonaws.com

  UrlApiHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/api/
      Handler: urls.lambda_handler
      Runtime: python3.7
      Layers:
        - !Ref SharedLibraryLayer
      Events:
        GetUrls:
          Type: Api
          Properties:
            Path: /urls
            Method: GET
        CreateUrl:
          Type: Api
          Properties:
            Path: /urls
            Method: POST
        DeleteUrl:
          Type: Api
          Properties:
            Path: /urls/{id}
            Method: DELETE
      Policies:
        - 'AWSLambdaExecute'
        - DynamoDBCrudPolicy:
            TableName: !Ref UrlsTable
      Environment:
        Variables:
          URL_TABLE_NAME: !Ref UrlsTable
          DYNAMODB_ENDPOINT: !Sub https://dynamodb.${AWS::Region}.amazonaws.com

Outputs:
  UrlApi:
    Description: "API Gateway endpoint URL for Prod stage for the URL API"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/urls/"
